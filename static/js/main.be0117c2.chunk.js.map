{"version":3,"sources":["carousel.js","questions.js","RandomNumbers.js","movies.js","App.js","serviceWorker.js","index.js"],"names":["Carousel","props","pictures","movie","slice","state","imgDisplayed","this","className","onClick","setState","prevImage","length","nextImage","pic","i","key","src","alt","map","renderImage","prevButton","nextButton","React","Component","Questions","title","options","id","renderButton","movies","RandomNumbers","movieId","ranNums","Math","floor","random","indexOf","push","Movies","round","concat","sort","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2+r3BAqDeA,G,wDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,SAAW,EAAKD,MAAME,MAAMD,SAASE,MAAM,EAAE,GAClD,EAAKC,MAAQ,CACXC,aAAc,GAJC,E,wDASjB,OAAOC,KAAKF,MAAMC,aAAe,I,mCAGrB,IAAD,OACX,GAAgC,IAA5BC,KAAKF,MAAMC,aACb,OAAO,0BAAME,UAAU,OAAOC,QAAS,kBAAM,EAAKC,SAAS,CAACJ,aAAc,EAAKK,gBAAxE,U,kCAKT,OAAOJ,KAAKF,MAAMC,aAAe,I,mCAGrB,IAAD,OACX,GAAIC,KAAKF,MAAMC,aAAeC,KAAKL,SAASU,OAAS,EACnD,OAAO,0BAAMJ,UAAU,OAAOC,QAAS,kBAAM,EAAKC,SAAS,CAACJ,aAAc,EAAKO,gBAAxE,U,kCAICC,EAAKC,GACf,OACE,4BAAQC,IAAKD,EAAGP,UAAWO,IAAMR,KAAKF,MAAMC,aAAe,OAAS,QAClE,yBAAKE,UAAU,SAASS,IAAKH,EAAIG,IAAKC,IAAI,Q,+BAKtC,IAAD,OACP,OACE,6BACE,yBAAKV,UAAU,aACZD,KAAKL,SAASiB,KAAI,SAACL,EAAKC,GAAN,OAAY,EAAKK,YAAYN,EAAKC,OAEtDR,KAAKc,aACLd,KAAKe,kB,GA5CSC,IAAMC,YCkBdC,G,iLAjBAtB,GACX,OACE,2BACE,4BAAQK,UAAU,SAASL,EAAMuB,U,+BAK7B,IAAD,OACP,OACE,yBAAKlB,UAAU,kBACZD,KAAKN,MAAM0B,QAAQR,KAAI,SAAAS,GAAE,OAAI,EAAKC,aAAa,EAAK5B,MAAM6B,OAAOF,Y,GAZlDL,IAAMC,YCSfO,MAZf,SAAuBC,EAASpB,GAG9B,IAFA,IAAIqB,EAAU,GACVlB,EAAI,EACK,IAANA,GAAS,CACd,IAAIa,EAAKM,KAAKC,MAAMD,KAAKE,UAAYxB,EAAO,IACxCgB,IAAOI,IAAmC,GAAxBC,EAAQI,QAAQT,KACpCb,IACAkB,EAAQK,KAAKV,IAGjB,OAAOK,GCcMM,E,kDAjBb,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IACDW,OAASkB,EAAOlB,OACrB,EAAKoB,QAAUE,KAAKM,MAAMN,KAAKE,SAAW,EAAKxB,QAC/C,EAAKe,QAAUI,EAAc,EAAKC,QAAS,EAAKpB,OAAS,GAAG6B,OAAO,EAAKT,SAASU,OAJhE,E,qDAQjB,OACE,6BACE,kBAAC,EAAD,CAAUvC,MAAO2B,EAAOvB,KAAKyB,WAC7B,kBAAC,EAAD,CAAWF,OAAQA,EAAQH,QAASpB,KAAKoB,e,GAZ5BJ,IAAMC,WCaZmB,E,uKAbX,OACE,6BACE,wBAAInC,UAAU,UAAd,cAGA,6BACE,kBAAC,EAAD,Y,GARQe,IAAMC,WCQJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be0117c2.chunk.js","sourcesContent":["import React from 'react';\nimport './carousel.css'\n\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pictures = this.props.movie.pictures.slice(0,5)\n    this.state = {\n      imgDisplayed: 0\n    }\n  };\n\n  prevImage() {\n    return this.state.imgDisplayed - 1\n  };\n\n  prevButton() {\n    if (this.state.imgDisplayed !== 0) {\n      return <span className=\"prev\" onClick={() => this.setState({imgDisplayed: this.prevImage()})}>&laquo;</span>\n    }\n  };\n\n  nextImage() {\n    return this.state.imgDisplayed + 1\n  };\n\n  nextButton() {\n    if (this.state.imgDisplayed < this.pictures.length - 1) {\n      return <span className=\"next\" onClick={() => this.setState({imgDisplayed: this.nextImage()})}>&raquo;</span>\n    }\n  };\n\n  renderImage(pic, i) {\n    return (\n      <figure key={i} className={i === this.state.imgDisplayed ? 'show' : 'hide'}>\n        <img className=\"center\" src={pic.src} alt=\"\" />\n      </figure>\n    )\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"slideshow\">\n          {this.pictures.map((pic, i) => this.renderImage(pic, i))}\n        </div>\n        {this.prevButton()}\n        {this.nextButton()}\n      </div>\n    )\n  };\n}\n\nexport default Carousel;","import React from 'react';\nimport './questions.css'\n\nclass Questions extends React.Component {\n  renderButton(movie) {\n    return (\n      <p>\n        <button className=\"start\">{movie.title}</button>\n      </p>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"center options\">\n        {this.props.options.map(id => this.renderButton(this.props.movies[id]))}\n      </div>\n    )\n  };\n}\n\nexport default Questions;","function RandomNumbers(movieId, length) {\n  var ranNums = []\n  var i = 3\n  while (i !== 0) {\n    var id = Math.floor(Math.random() * (length+1))\n    if (id !== movieId && ranNums.indexOf(id) == -1) {\n      i--\n      ranNums.push(id);\n    }\n  }\n  return ranNums\n}\nexport default RandomNumbers;","import React from 'react';\nimport movies from './movies.json';\nimport Carousel from './carousel.js'\nimport Questions from './questions';\nimport RandomNumbers from './RandomNumbers';\n\nclass Movies extends React.Component {\n  constructor(props) {\n    super(props);\n    this.length = movies.length\n    this.movieId = Math.round(Math.random() * this.length)\n    this.options = RandomNumbers(this.movieId, this.length - 1).concat(this.movieId).sort()\n  }\n\n  render() {\n    return (\n      <div>\n        <Carousel movie={movies[this.movieId]} />\n        <Questions movies={movies} options={this.options} />\n      </div>\n    )\n  };\n}\n\nexport default Movies;","import React from 'react';\nimport './App.css';\nimport Movies from './movies.js'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"center\">\n          Quiz Movie\n        </h1>\n        <div>\n          <Movies />\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}