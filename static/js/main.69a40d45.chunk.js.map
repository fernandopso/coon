{"version":3,"sources":["carousel.js","movies.js","App.js","serviceWorker.js","index.js"],"names":["Carousel","props","totalPictures","movie","pictures","length","state","imgDisplayed","pic","i","className","this","src","alt","map","renderImage","onClick","setState","prevImage","nextImage","React","Component","Movies","movieId","Math","round","random","movies","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y9r3BA2CeA,G,wDAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,cAAgB,EAAKD,MAAME,MAAMC,SAASC,OAC/C,EAAKC,MAAQ,CACXC,aAAc,GAJC,E,wDAQPC,EAAKC,GACf,OACE,4BAAQC,UAAWD,GAAKE,KAAKL,MAAMC,aAAe,OAAS,QACzD,yBAAKG,UAAU,SAASE,IAAKJ,EAAII,IAAKC,IAAI,Q,kCAM9C,GAAIF,KAAKL,MAAMC,aAAeI,KAAKT,cACjC,OAAOS,KAAKL,MAAMC,aAAe,I,kCAKnC,GAAgC,IAA5BI,KAAKL,MAAMC,aACb,OAAOI,KAAKL,MAAMC,aAAe,I,+BAI3B,IAAD,OACP,OACE,yBAAKG,UAAU,aACZC,KAAKV,MAAME,MAAMC,SAASU,KAAI,SAACN,EAAKC,GAAN,OAAY,EAAKM,YAAYP,EAAKC,MACjE,0BAAMC,UAAU,OAAOM,QAAS,kBAAM,EAAKC,SAAS,CAACV,aAAc,EAAKW,gBAAxE,QACA,0BAAMR,UAAU,OAAOM,QAAS,kBAAM,EAAKC,SAAS,CAACV,aAAc,EAAKY,gBAAxE,a,GAlCeC,IAAMC,YCcdC,E,kDAZb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,QAAUC,KAAKC,MAAMD,KAAKE,SAAWC,EAAOtB,QAFhC,E,qDAMjB,OACE,kBAAC,EAAD,CAAUF,MAAOwB,EAAOhB,KAAKY,e,GARdH,IAAMC,WCeZO,E,uKAbX,OACE,6BACE,wBAAIlB,UAAU,UAAd,cAGA,6BACE,kBAAC,EAAD,Y,GARQU,IAAMC,WCQJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69a40d45.chunk.js","sourcesContent":["import React from 'react';\nimport './carousel.css'\n\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.totalPictures = this.props.movie.pictures.length\n    this.state = {\n      imgDisplayed: 0\n    }\n  };\n\n  renderImage(pic, i) {\n    return (\n      <figure className={i == this.state.imgDisplayed ? 'show' : 'hide'}>\n        <img className=\"center\" src={pic.src} alt=\"\" />\n      </figure>\n    )\n  };\n\n  nextImage() {\n    if (this.state.imgDisplayed < this.totalPictures) {\n      return this.state.imgDisplayed + 1\n    }\n  };\n\n  prevImage() {\n    if (this.state.imgDisplayed !== 0) {\n      return this.state.imgDisplayed - 1\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"slideshow\">\n        {this.props.movie.pictures.map((pic, i) => this.renderImage(pic, i))}\n        <span className=\"prev\" onClick={() => this.setState({imgDisplayed: this.prevImage()})}>&laquo;</span>\n        <span className=\"next\" onClick={() => this.setState({imgDisplayed: this.nextImage()})}>&raquo;</span>\n      </div>\n    )\n  };\n}\n\nexport default Carousel;","import React from 'react';\nimport movies from './movies.json';\nimport Carousel from './carousel.js'\n\nclass Movies extends React.Component {\n  constructor(props) {\n    super(props);\n    this.movieId = Math.round(Math.random() * movies.length)\n  }\n\n  render() {\n    return (\n      <Carousel movie={movies[this.movieId]} />\n    )\n  };\n}\n\nexport default Movies;","import React from 'react';\nimport './App.css';\nimport Movies from './movies.js'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"center\">\n          Quiz Movie\n        </h1>\n        <div>\n          <Movies />\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}